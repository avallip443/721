
% Enter the names of your group members below.
% If you only have 2 group members, leave the last space blank
%
%%%%%
%%%%% NAME: Arathi Vallipuranathan
%%%%% NAME: Micah Pascua
%%%%% NAME: Carole Youssef
%
% Add your queries below. Please use the following format
% 
% %%%%% QUERY 2
% % EXPLANATION: Checks if there is a block on blockA
% on(X, blockA).
%
% where 2 is the number of the query. The EXPLANATION line should contain your explanation 
% in English of what the query tests. Omit the "%" on the line with the query
% Don't forget to end queries with a period.

%%%%%% QUERY 1
% EXPLANATION: Checks if r1 can pass to r2 within 1 pass. Since pathClear(r2, r1) is in the KB, this should be true.
canPass(r2, r1, 1).


%%%%%% QUERY 2
% EXPLANATION: Checks if r1 can pass to r2 within 1 pass. Since pathClear(r2, r1) is in the KB, canPass is symmetrical, and the previous query with a smaller limit to passes holds true, this should be true as well.
canPass(r1, r2, 3).


%%%%%% QUERY 3
% EXPLANATION: Checks if r6 can pass to r4 within 5 passes. Since pathClear(r5, r6), pathClear(r1, r5), pathClear(r3, r1), and pathClear(r3, r4) (total of 4 passes) exist in the KB, this should be true.
canPass(r6, r4, 5).


%%%%%% QUERY 4
% EXPLANATION: Checks if r6 can pass to r1 within 1 pass. Since there is no direct path from r6 to r1 in the KB, this should be false.
canPass(r6, r1, 1).


%%%%%% QUERY 5
% EXPLANATION: Finds all R1 that can pass to R2 within 2 passes. This should return unqiue values (r1, r2), (r1, r3), (r1, r5), (r2, r3), (r3, r4), and (r5, r6) (this should be doubled to account for symmetry in pathClear). 
canPass(R1, R2, 1).


%%%%%% QUERY 6
% EXPLANATION: Checks if robot r3 can score within 1 pass. Since r3 has the ball and pathClear(r3, net) is in the KB this should be true.
canScore(r3, 1).


%%%%%% QUERY 7
% EXPLANATION: Checks if robot r1 can score within 2 passes. Since r3 has the ball and pathClear(r3, r1) and pathClear(r1, net) are in the KB, this should be true.
canScore(r1, 2).


%%%%%% QUERY 8
% EXPLANATION: Checks if r1 can score within 3 passes. Since the above query holds true with a smaller limit of passes, this should be true as well.
canScore(r1, 3).


%%%%%% QUERY 9
% EXPLANATION: Checks if r2 can score within 3 passes. Even though r2 can receive the ball in at most M-1 steps, it cannot direclty shoot at the net, so this should be false.
canScore(r2, 3).


%%%%%% QUERY 10
% EXPLANATION: Finds all R that can score within 2 passes. This should return r1, r3, and r4 as possible values for R.
canScore(R, 2).


%%%%%% YOU MAY CHOOSE TO ADD MORE THAN 10 QUERIES HERE
%%%%%% HOWEVER, ONLY THE FIRST 10 WILL BE MARKED


%%%%% INTERACTION
%
% Add your interaction below.
% 

?- canPass(r2, r1, 1).
Yes (0.00s cpu, solution 1, maybe more)
No (0.00s cpu)

?- canPass(r1, r2, 3).
Yes (0.00s cpu, solution 1, maybe more)
Yes (0.00s cpu, solution 2, maybe more)
Yes (0.00s cpu, solution 3, maybe more)
Yes (0.00s cpu, solution 4, maybe more)
Yes (0.00s cpu, solution 5, maybe more)
Yes (0.00s cpu, solution 6, maybe more)
No (0.00s cpu)

?- canPass(r6, r4, 5).
Yes (0.00s cpu, solution 1, maybe more)
Yes (0.00s cpu, solution 2, maybe more)
No (0.00s cpu)

?- canPass(r6, r1, 1).
No (0.00s cpu)

?- canPass(R1, R2, 1).
R1 = r1
R2 = r5
Yes (0.00s cpu, solution 1, maybe more)
R1 = r2
R2 = r1
Yes (0.00s cpu, solution 2, maybe more)
R1 = r3
R2 = r1
Yes (0.00s cpu, solution 3, maybe more)
R1 = r3
R2 = r2
Yes (0.00s cpu, solution 4, maybe more)
R1 = r3
R2 = r4
Yes (0.00s cpu, solution 5, maybe more)
R1 = r5
R2 = r6
Yes (0.00s cpu, solution 6, maybe more)
R1 = r1
R2 = r2
Yes (0.00s cpu, solution 7, maybe more)
R1 = r1
R2 = r3
Yes (0.00s cpu, solution 8, maybe more)
R1 = r2
R2 = r3
Yes (0.00s cpu, solution 9, maybe more)
R1 = r4
R2 = r3
Yes (0.00s cpu, solution 10, maybe more)
R1 = r5
R2 = r1
Yes (0.00s cpu, solution 11, maybe more)
R1 = r6
R2 = r5
Yes (0.00s cpu, solution 12, maybe more)
No (0.00s cpu)

?- canScore(r3, 1).
Yes (0.00s cpu, solution 1, maybe more)
No (0.00s cpu)

?- canScore(r1, 2).
Yes (0.00s cpu, solution 1, maybe more)
No (0.00s cpu)

?- canScore(r1, 3).
Yes (0.00s cpu, solution 1, maybe more)
Yes (0.00s cpu, solution 2, maybe more)
No (0.00s cpu)

?- canScore(r2, 3).
No (0.00s cpu)

?- canScore(R, 2).
R = r3
Yes (0.00s cpu, solution 1, maybe more)
R = r1
Yes (0.00s cpu, solution 2, maybe more)
R = r4
Yes (0.00s cpu, solution 3, maybe more)
No (0.00s cpu)
